/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ReservationsImport } from './routes/reservations'
import { Route as RegisterImport } from './routes/register'
import { Route as MeImport } from './routes/me'
import { Route as ManageImport } from './routes/manage'
import { Route as LoginImport } from './routes/login'
import { Route as R404Import } from './routes/404'
import { Route as IndexImport } from './routes/index'
import { Route as ManageIndexImport } from './routes/manage/index'
import { Route as BooksIndexImport } from './routes/books/index'
import { Route as ManageBooksIndexImport } from './routes/manage/books/index'
import { Route as BooksIdIndexImport } from './routes/books/$id/index'
import { Route as ManageBooksCreateImport } from './routes/manage/books/create'
import { Route as ManageBooksIdImport } from './routes/manage/books/$id'
import { Route as BooksIdReserveImport } from './routes/books/$id/reserve'

// Create/Update Routes

const ReservationsRoute = ReservationsImport.update({
  path: '/reservations',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const ManageRoute = ManageImport.update({
  path: '/manage',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const R404Route = R404Import.update({
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageIndexRoute = ManageIndexImport.update({
  path: '/',
  getParentRoute: () => ManageRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  path: '/books/',
  getParentRoute: () => rootRoute,
} as any)

const ManageBooksIndexRoute = ManageBooksIndexImport.update({
  path: '/books/',
  getParentRoute: () => ManageRoute,
} as any)

const BooksIdIndexRoute = BooksIdIndexImport.update({
  path: '/books/$id/',
  getParentRoute: () => rootRoute,
} as any)

const ManageBooksCreateRoute = ManageBooksCreateImport.update({
  path: '/books/create',
  getParentRoute: () => ManageRoute,
} as any)

const ManageBooksIdRoute = ManageBooksIdImport.update({
  path: '/books/$id',
  getParentRoute: () => ManageRoute,
} as any)

const BooksIdReserveRoute = BooksIdReserveImport.update({
  path: '/books/$id/reserve',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/manage': {
      id: '/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/reservations': {
      id: '/reservations'
      path: '/reservations'
      fullPath: '/reservations'
      preLoaderRoute: typeof ReservationsImport
      parentRoute: typeof rootRoute
    }
    '/books/': {
      id: '/books/'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/': {
      id: '/manage/'
      path: '/'
      fullPath: '/manage/'
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof ManageImport
    }
    '/books/$id/reserve': {
      id: '/books/$id/reserve'
      path: '/books/$id/reserve'
      fullPath: '/books/$id/reserve'
      preLoaderRoute: typeof BooksIdReserveImport
      parentRoute: typeof rootRoute
    }
    '/manage/books/$id': {
      id: '/manage/books/$id'
      path: '/books/$id'
      fullPath: '/manage/books/$id'
      preLoaderRoute: typeof ManageBooksIdImport
      parentRoute: typeof ManageImport
    }
    '/manage/books/create': {
      id: '/manage/books/create'
      path: '/books/create'
      fullPath: '/manage/books/create'
      preLoaderRoute: typeof ManageBooksCreateImport
      parentRoute: typeof ManageImport
    }
    '/books/$id/': {
      id: '/books/$id/'
      path: '/books/$id'
      fullPath: '/books/$id'
      preLoaderRoute: typeof BooksIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/books/': {
      id: '/manage/books/'
      path: '/books'
      fullPath: '/manage/books'
      preLoaderRoute: typeof ManageBooksIndexImport
      parentRoute: typeof ManageImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  R404Route,
  LoginRoute,
  ManageRoute: ManageRoute.addChildren({
    ManageIndexRoute,
    ManageBooksIdRoute,
    ManageBooksCreateRoute,
    ManageBooksIndexRoute,
  }),
  MeRoute,
  RegisterRoute,
  ReservationsRoute,
  BooksIndexRoute,
  BooksIdReserveRoute,
  BooksIdIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/404",
        "/login",
        "/manage",
        "/me",
        "/register",
        "/reservations",
        "/books/",
        "/books/$id/reserve",
        "/books/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/manage": {
      "filePath": "manage.tsx",
      "children": [
        "/manage/",
        "/manage/books/$id",
        "/manage/books/create",
        "/manage/books/"
      ]
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/reservations": {
      "filePath": "reservations.tsx"
    },
    "/books/": {
      "filePath": "books/index.tsx"
    },
    "/manage/": {
      "filePath": "manage/index.tsx",
      "parent": "/manage"
    },
    "/books/$id/reserve": {
      "filePath": "books/$id/reserve.tsx"
    },
    "/manage/books/$id": {
      "filePath": "manage/books/$id.tsx",
      "parent": "/manage"
    },
    "/manage/books/create": {
      "filePath": "manage/books/create.tsx",
      "parent": "/manage"
    },
    "/books/$id/": {
      "filePath": "books/$id/index.tsx"
    },
    "/manage/books/": {
      "filePath": "manage/books/index.tsx",
      "parent": "/manage"
    }
  }
}
ROUTE_MANIFEST_END */
